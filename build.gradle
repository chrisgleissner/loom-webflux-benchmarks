plugins {
    id 'java'
    id 'jacoco'
    id 'com.adarshr.test-logger' version '4.0.+'
    id 'io.freefair.lombok' version '8.+'
    id 'io.spring.dependency-management' version '1.1.+'
    id "org.jetbrains.kotlin.jvm" version "2.0.+"
    id 'org.springframework.boot' version '3.3.+'
}

repositories { mavenCentral() }
bootRun { jvmArgs(["-Xms2g", "-Xmx2g", "-XX:+ExitOnOutOfMemoryError", "-Djdk.tracePinnedThreads=full"]) }

dependencyManagement {
    imports {
        mavenBom "org.testcontainers:testcontainers-bom:1.20.+"
    }
}

dependencies {
    implementation "com.github.ben-manes.caffeine:caffeine"
    implementation "com.google.guava:guava:33.2.+"
    implementation "io.github.oshai:kotlin-logging-jvm:7.0.+"
    implementation 'org.jetbrains.kotlin:kotlin-stdlib:2.0.+'
    implementation "org.springframework.boot:spring-boot-starter-actuator"
    implementation "org.springframework.boot:spring-boot-starter-cache"
    implementation "org.springframework.boot:spring-boot-starter-data-jpa"
    implementation "org.springframework.boot:spring-boot-starter-webflux"
    runtimeOnly "com.h2database:h2"
    runtimeOnly "org.postgresql:postgresql:42.+"
    testImplementation "io.github.hakky54:logcaptor:2.9.+"
    testImplementation "org.apache.commons:commons-compress:1.26.+"
    testImplementation "org.assertj:assertj-core"
    testImplementation "org.junit.jupiter:junit-jupiter"
    testImplementation "org.junit-pioneer:junit-pioneer:2.2.+"
    testImplementation 'org.mockito.kotlin:mockito-kotlin:5.3.+'
    testImplementation "org.springframework.boot:spring-boot-starter-test"
    testImplementation "org.springframework.boot:spring-boot-testcontainers"
    testImplementation "org.testcontainers:junit-jupiter"
    testImplementation "org.testcontainers:postgresql"
    testRuntimeOnly "org.junit.platform:junit-platform-launcher"
}

def activeProfiles = System.getenv('SPRING_PROFILES_ACTIVE')
if (activeProfiles?.contains('platform-tomcat') || activeProfiles?.contains('loom-tomcat')) {
    dependencies {
        // Takes precedence over spring-boot-starter-webflux if both on classpath
        implementation 'org.springframework.boot:spring-boot-starter-web'
    }
    println 'Added spring-boot-starter-web dependency'
}

test {
    useJUnitPlatform()
    maxParallelForks = 2
    jvmArgs '-XX:+EnableDynamicAgentLoading'
    jvmArgs '-Xshare:off'
}

tasks.withType(Test).configureEach {
    ext.failedTests = []
    afterTest { descriptor, result ->
        if (result.resultType == TestResult.ResultType.FAILURE) {
            failedTests << ["${descriptor.className}::${descriptor.name}"]
        }
    }
    afterSuite { suite, result ->
        if (!suite.parent) {
            if (!failedTests.empty) {
                logger.lifecycle("Failed tests:")
                failedTests.each { failedTest -> logger.lifecycle("${failedTest}") }
            }
        }
    }
}

jacocoTestReport {
    reports {
        xml.required = true
    }
}
